"""
–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è: engineering.py

–û–ø–∏—Å–∞–Ω–∏–µ:
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É.

–§—É–Ω–∫—Ü–∏–∏:
    - main(): –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–º–ø–æ—Ä—Ç –∏ –∏–Ω–∏—Ü–∏–ª–∏–∑–∞—Ü–∏—é
    - choose(): –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–±–æ—Ä
    - get_openings() –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ–µ–º—ã
    - save_in_file() –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª
    - load() –∫–∞—Å—Ç–æ–º–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫
"""
import os
import sys
import time
import itertools

from lib.masonry import Wall, Brick, Calculator
from lib.validator import entry_validation, valid_openings


def main():

    spin = itertools.cycle("üåë"*1+"üåí"*1+"üåì"*1+"üåî"*1 +"üåï"*1+"üåñ"*1+"üåó"*1+"üåò"*1)

    masonry_types = {
        1: "–í –ø–æ–ª–æ–≤–∏–Ω—É –∫–∏—Ä–ø–∏—á–∞",
        2: "–í –æ–¥–∏–Ω –∫–∏—Ä–ø–∏—á",
        3: "–í –ø–æ–ª—Ç–æ—Ä–∞ –∫–∏—Ä–ø–∏—á–∞",
        4: "–í –¥–≤–∞ –∫–∏—Ä–ø–∏—á–∞",
        5: "–í –¥–≤–∞ —Å –ø–æ–ª–æ–≤–∏–Ω–æ–π –∫–∏—Ä–ø–∏—á–∞",
        6: "–í —Ç—Ä–∏ –∫–∏—Ä–ø–∏—á–∞",
    }
    brick_types = {
        1: "–û–¥–∏–Ω–∞—Ä–Ω—ã–π (1–ù–§)",
        2: "–ü–æ–ª—É—Ç–æ—Ä–Ω—ã–π (1.4–ù–§)",
        3: "–î–≤–æ–π–Ω–æ–π (2.1–ù–§)",
    }

    mortar_types = {
        1: "–¢–æ–Ω–∫–∏–π —à–æ–≤",
        2: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–æ–≤",
        3: "–£—Ç–æ–ª—â—ë–Ω–Ω—ã–π —à–æ–≤",
        4: "–û—á–µ–Ω—å —Ç–æ–ª—Å—Ç—ã–π —à–æ–≤",
    }
    
    openings: list[tuple[float, float]] = []

    load(spin=spin) # type: ignore

    print("\n–°–¢–†–û–ò–¢–ï–õ–¨–ù–´–ï –†–ê–°–ß–Å–¢–´ –ö–õ–ê–î–ö–ò –ö–ò–†–ü–ò–ß–ê\n")
    type_id = choose("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª–∞–¥–∫–∏: ", masonry_types)
    length = float(entry_validation("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —Å—Ç–µ–Ω—ã (–º–µ—Ç—Ä—ã):\n>> "))
    height = float(entry_validation("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É —Å—Ç–µ–Ω—ã (–º–µ—Ç—Ä—ã):\n>> "))
    brick_id = choose("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∏—Ä–ø–∏—á–∞: ", brick_types)
    mortar_id = choose("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–≤–∞: ", mortar_types)
    price_per_brick = float(entry_validation("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ 1 –∫–∏—Ä–ø–∏—á (‚ÇΩ):\n>> "))
    price_per_m3 = float(entry_validation("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ 1 –º¬≥ —Ä–∞—Å—Ç–≤–æ—Ä–∞:\n>> "))
    openings_count = valid_openings("–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—ë–º–æ–≤ (–æ–∫–Ω–∞ –∏–ª–∏ –¥–≤–µ—Ä–∏)?\n>> ")
    get_openings(openings=openings, openings_count=openings_count)

    wall = Wall(length=length, height=height, type_id=type_id, openings=openings)
    brick = Brick(brick_id=brick_id, mortar_id=mortar_id)
    calc = Calculator(wall=wall, brick=brick)
    summary = calc.get_summary(
        price_per_brick=price_per_brick, price_per_m3=price_per_m3
    )
    print("\n–†–ï–ó–£–õ–¨–¢–ê–¢:\n")
    print(summary)
    save_in_file(summary)


def choose(prompt: str, options: dict[int, str]) -> int:
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø –∫–∏—Ä–ø–∏—á–∞, –∫–ª–∞–¥–∫–∏, —à–≤–∞"""
    while True:
        print(prompt)
        for key, value in options.items():
            print(f"{key}: {value}")  # type: ignore
        choise = entry_validation("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:\n>> ")
        if choise in options:
            return choise
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n")


def get_openings(*, openings: list, openings_count: int) -> list[tuple[float, float]]:  # type: ignore
    """–§—É–Ω–∫—Ü–∏—è –±–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–µ–º–∞–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    for i in range(openings_count):
        print(f"\n–ü—Ä–æ–µ–º –Ω–æ–º–µ—Ä {i+1}:")
        o_width = float(entry_validation("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –ø—Ä–æ–µ–º–∞ (–º–µ—Ç—Ä—ã): "))
        o_height = float(entry_validation("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –ø—Ä–æ–µ–º–∞ (–º–µ—Ç—Ä—ã): "))
        openings.append((o_width, o_height))  # type: ignore


def save_in_file(data: str, /) -> None:
    """–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª .txt"""
    with open("save.txt", "a", encoding="UTF-8") as f:
        print()
        f.write(data + "\n")

def load(*, spin: str):
    """–ó–∞–≥—Ä—É–∑—á–∏–∫"""
    is_windows = sys.platform.startswith("win")
    is_mac = sys.platform.startswith('darwin')
    is_linux = sys.platform.startswith('linux')

    clear_command = ""

    if is_windows:
        clear_command = "cls"
    elif is_mac:
        clear_command = "clear"
    elif is_linux:
        clear_command = "clear"
    else:
        print("–ü–æ–ª–Ω—ã–π —Ñ—É–Ω—Ü–∏–æ–Ω–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞: Linux, macOS, Windows.")

    os.system(clear_command)

    for i in range(101):
        sym = next(spin) # type: ignore
        print(f"\r–ó–∞–≥—Ä—É–∑–∫–∞: {i}% {sym}", end="", flush=True)
        time.sleep(0.1)
    print("\n")


if __name__ == "__main__":
    main()
